from flask import Flask, jsonify, request
import joblib
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity

app = Flask(__name__)

# Load the trained recommendation model
vectorizer, similarity_matrix, df = joblib.load("user_recommendation_model.pkl")

# Function to recommend articles based on similar users
def recommend_articles(user_guid, top_n=5):
    if user_guid not in df['guid'].values:
        return {"error": f"User {user_guid} not found in the dataset."}

    # Get index of the user
    user_idx = df[df['guid'] == user_guid].index[0]

    # Get similarity scores for this user
    sim_scores = list(enumerate(similarity_matrix[user_idx]))

    # Sort users by similarity score (excluding the user itself)
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:]

    # Get top N similar users
    top_users = [df.iloc[i[0]] for i in sim_scores[:top_n]]

    # Collect documents liked by similar users
    recommended_articles = set()
    user_liked_articles = set(df.iloc[user_idx]['documentsLiked'])

    for similar_user in top_users:
        for article in similar_user['documentsLiked']:
            if article not in user_liked_articles:
                recommended_articles.add(article)

    return list(recommended_articles)[:top_n]

# API endpoint to get article recommendations
@app.route("/recommend", methods=["GET"])
def recommend():
    user_guid = request.args.get("guid")

    if not user_guid:
        return jsonify({"error": "Missing GUID parameter"}), 400

    recommendations = recommend_articles(user_guid)
    return jsonify({"recommendations": recommendations})

if __name__ == "__main__":
    app.run(debug=True)
